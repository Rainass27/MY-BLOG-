{
  "hash": "f63320a457d854a1fc806cc46c43a4fa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Groups\"\nauthor: \"Raina\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"ggformula\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n\tlearnr::run_tutorial(\"introduction\", package = \"ggformula\")\n\tlearnr::run_tutorial(\"refining\", package = \"ggformula\")\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"mosaic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"kableExtra\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmath_anxiety <-read_csv(\"../data/MathAnxiety.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 599 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Age;Gender;Grade;AMAS;RCMAS;Arith\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmath_anxiety <- read_delim(file=\"../data/MathAnxiety.csv\", delim=\";\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 599 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (2): Gender, Grade\ndbl (3): AMAS, RCMAS, Arith\nnum (1): Age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nmath_anxiety\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 599 × 6\n     Age Gender Grade      AMAS RCMAS Arith\n   <dbl> <chr>  <chr>     <dbl> <dbl> <dbl>\n 1  1378 Boy    Secondary     9    20     6\n 2  1407 Boy    Secondary    18     8     6\n 3  1379 Girl   Secondary    23    26     5\n 4  1428 Girl   Secondary    19    18     7\n 5  1356 Boy    Secondary    23    20     1\n 6  1350 Girl   Secondary    27    33     1\n 7  1336 Boy    Secondary    22    23     4\n 8  1393 Boy    Secondary    17    11     7\n 9  1317 Girl   Secondary    28    32     2\n10  1348 Boy    Secondary    20    30     6\n# ℹ 589 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmath_anxiety %>%\n  group_by(Age,Gender,Grade) %>%\n  summarize(AMAS = mean(AMAS), count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Age', 'Gender'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 474 × 5\n# Groups:   Age, Gender [474]\n     Age Gender Grade    AMAS count\n   <dbl> <chr>  <chr>   <dbl> <int>\n 1    37 Girl   Primary    11     1\n 2   837 Girl   Primary    26     1\n 3   910 Girl   Primary    17     1\n 4   925 Girl   Primary    28     1\n 5   927 Girl   Primary    10     1\n 6   931 Boy    Primary    16     1\n 7   938 Boy    Primary    24     1\n 8   938 Girl   Primary    35     1\n 9   940 Boy    Primary    13     1\n10   947 Girl   Primary    17     2\n# ℹ 464 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmath_anxiety %>%\n  group_by(Age,Gender,Grade) %>%\n  summarize(RCMAS = mean(RCMAS), count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Age', 'Gender'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 474 × 5\n# Groups:   Age, Gender [474]\n     Age Gender Grade   RCMAS count\n   <dbl> <chr>  <chr>   <dbl> <int>\n 1    37 Girl   Primary     5     1\n 2   837 Girl   Primary    23     1\n 3   910 Girl   Primary    13     1\n 4   925 Girl   Primary    21     1\n 5   927 Girl   Primary    12     1\n 6   931 Boy    Primary    20     1\n 7   938 Boy    Primary    20     1\n 8   938 Girl   Primary    33     1\n 9   940 Boy    Primary    15     1\n10   947 Girl   Primary    31     2\n# ℹ 464 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmath_anxiety %>%\n  group_by(Age,Gender,Grade) %>%\n  summarize(Arith = mean(Arith), count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Age', 'Gender'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 474 × 5\n# Groups:   Age, Gender [474]\n     Age Gender Grade   Arith count\n   <dbl> <chr>  <chr>   <dbl> <int>\n 1    37 Girl   Primary     8     1\n 2   837 Girl   Primary     3     1\n 3   910 Girl   Primary     4     1\n 4   925 Girl   Primary     5     1\n 5   927 Girl   Primary     3     1\n 6   931 Boy    Primary     4     1\n 7   938 Boy    Primary     6     1\n 8   938 Girl   Primary     6     1\n 9   940 Boy    Primary     5     1\n10   947 Girl   Primary     2     2\n# ℹ 464 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmath_anxiety %>%\n  group_by(Age,Grade) %>%\n  summarize(AMAS = mean(AMAS), count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'Age'. You can override using the `.groups`\nargument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 391 × 4\n# Groups:   Age [391]\n     Age Grade    AMAS count\n   <dbl> <chr>   <dbl> <int>\n 1    37 Primary  11       1\n 2   837 Primary  26       1\n 3   910 Primary  17       1\n 4   925 Primary  28       1\n 5   927 Primary  10       1\n 6   931 Primary  16       1\n 7   938 Primary  29.5     2\n 8   940 Primary  13       1\n 9   947 Primary  17       2\n10   948 Primary  14       1\n# ℹ 381 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmath_anxiety %>% \n  group_by(Gender) %>% \n  summarise(\n    avg_AMAS=mean(AMAS),\n    avg_RCMAS=mean(RCMAS),\n    avg_Arith=mean(Arith),\n    count=n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  Gender avg_AMAS avg_RCMAS avg_Arith count\n  <chr>     <dbl>     <dbl>     <dbl> <int>\n1 Boy        21.2      18.1      5.27   323\n2 Girl       22.9      20.6      5.34   276\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}